# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Configure
      run: mkdir build && cd build && cmake G Xcode ..
    - name: build
      run: cmake --build build
    - name: test
      run: cd build && ctest
    - name: package
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        PACKAGE_NAME=`echo ${{ github.repository }} | sed 's/.*\///g'`
        PACKAGE_REV=`echo ${{ github.sha }} | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        mkdir $PACKAGE_NAME
        if [ -e package-info.json ]; then cp package-info.json $PACKAGE_NAME; fi
        for f in *.md; do [ -e "$f" ] && cp "$f" $PACKAGE_NAME ; done
        if [ -e icon.png ]; then cp icon.png $PACKAGE_NAME; fi
        if [ -e CMakeLists.txt ]; then cp CMakeLists.txt $PACKAGE_NAME; fi
        if [ -d code ]; then cp -r code $PACKAGE_NAME; fi
        if [ -d docs ]; then cp -r docs $PACKAGE_NAME; fi
        if [ -d examples ]; then cp -r examples $PACKAGE_NAME; fi
        if [ -d extensions ]; then cp -r extensions $PACKAGE_NAME; fi
        if [ -d externals ]; then cp -r externals $PACKAGE_NAME; fi
        if [ -d extras ]; then cp -r extras $PACKAGE_NAME; fi
        if [ -d help ]; then cp -r help $PACKAGE_NAME; fi
        if [ -d init ]; then cp -r init $PACKAGE_NAME; fi
        if [ -d java-classes ]; then cp -r java-classes $PACKAGE_NAME; fi
        if [ -d java-doc ]; then cp -r java-doc $PACKAGE_NAME; fi
        if [ -d javascript ]; then cp -r javascript $PACKAGE_NAME; fi
        if [ -d jsui ]; then cp -r jsui $PACKAGE_NAME; fi
        if [ -d media ]; then cp -r media $PACKAGE_NAME; fi
        if [ -d misc ]; then cp -r misc $PACKAGE_NAME; fi
        if [ -d patchers ]; then cp -r patchers $PACKAGE_NAME; fi
        if [ -d support ]; then cp -r support $PACKAGE_NAME; fi
        if [ -d source ]; then cp -r source $PACKAGE_NAME; fi
        if [ -d tests ]; then cp -r tests $PACKAGE_NAME; fi
        if [ -e $PACKAGE_NAME/ReadMe-Public.md ]; then rm -f $PACKAGE_NAME/ReadMe.md; mv $PACKAGE_NAME/ReadMe-Public.md $PACKAGE_NAME/ReadMe.md; fi
        mkdir dist
    - name: compress_macos
      if: matrix.os == 'macos-latest'
      run: |
        PACKAGE_NAME=`echo ${{ github.repository }} | sed 's/.*\///g'`
        PACKAGE_REV=`echo ${{ github.sha }} | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        CONFIG_LOWERCASE=`echo $CONFIG | tr '[A-Z]' '[a-z]'`
        zip -r dist/${{env.PACKAGE_NAME}}-mac-$PACKAGE_REV-$CONFIG_LOWERCASE.zip $PACKAGE_NAME
    - name: compress_windows
      if: matrix.os == 'windows-latest'
      run: |
        PACKAGE_NAME=`echo ${{ github.repository }} | sed 's/.*\///g'`
        PACKAGE_REV=`echo ${{ github.sha }} | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        CONFIG_LOWERCASE=`echo $CONFIG | tr '[A-Z]' '[a-z]'`
        7z a dist/$PACKAGE_NAME-win-$PACKAGE_REV-$CONFIG_LOWERCASE.zip $PACKAGE_NAME    
    - name: upload
      uses: shallwefootball/s3-upload-action@v1.0.1
      with:
        aws_key_id: ${{ secrets.S3_ID }}
        aws_secret_access_key: ${{ secrets.S3_KEY }}
        aws_bucket: cycling74-ci-public
        source_dir: 'dist'
  
